<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--
        xmlns:context="http://www.springframework.org/schema/context" IOC注解方式实现 引入
    -->
    <!--
        spring AOP 实现 引入
        xmlns:aop="http://www.springframework.org/schema/aop

        注意写法：
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
    -->
    <bean id="accountService" class="com.wj02.service.impl.AccountServiceImpl"></bean>
    <bean id="accountDao" class="com.wj02.dao.impl.AccountDaoImpl" />
    <!--spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
    -->
    <!--创建bean的三种方式-->
    <!--第一种方式：使用默认的构造函数创建
        在spring中使用bean标签，配置id和class属性
        采用的就是使用默认构造函数构造，如果没有默认午参构造，则不能创建
    -->
    <bean id="accountService03" class="com.wj03.service.impl.AccountServiceImpl" />
    <!--第二种方式，使用普通工厂中的方法创建对象（使用某个类中的方法创建对象），并存入spring容器-->
    <bean id="instanceMyFactory" class="com.wj03.factory.MyFactory" />
    <bean id="accountService03-1" factory-bean="instanceMyFactory" factory-method="instance" />
    <!--第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）-->
    <bean id="accountService03-2" class="com.wj03.factory.MyFactory" factory-method="instanceStatic" />
    <!--
        bean的作用范围
        bean标签的scope属性
            singleton:单例（默认）
            prototype：多例
            request：作用于web应用的请求范围
            session：作用于web应用的session回话范围
            global-session：作用于集群环境的回话范围，不是集群环境，就是session。
    -->
    <!--
        bean对象的生命周期
        对应两个属性，init-method destroy-method
        单例对象：
            出生：容器创建时出生
            活着：只要容器在，就一直活着
            死亡：容器销毁，对象死亡
        多例对象：
            出生：当使用对象时创建
            活着：
            死亡：什么时间死亡，spring是不会知道的，对象长时间不被使用，被java gc回收掉
    -->
    <bean id = "accountService03-3" class="com.wj03.service.impl.AccountServiceImpl" init-method="init" destroy-method="destroy" scope="prototype" />

    <!--spring中的依赖注入
        Dependency Injection
        IOC的作用：降低程序间的依赖关系（耦合）
        依赖关系的管理以后都交给了spring来维护
        在当前类中需要使用其他类的对象，由spring为我们提供，只需要在配置文件中说明
        依赖关系的维护就叫做依赖注入
        依赖注入：
            能注入的类型（有三种）：
                1.基本类型和String
                2.其它bean类型
                3、复杂类型/集合类型
            注入的方式（有三种）：
                1、构造函数注入
                2、使用set方法注入
                3、使用注解注入
    -->
    <!--
        构造函数注入
        使用标签constructor-arg
        标签属性：
            type：指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            index：用于指定注入的数据在构造函数中索引位置的参数赋值，索引的位置从0开始
            name：用于指定给构造函数中指定名称的参数赋值
            value：给基本类型和String类型赋值
            ref：其它的bean类型，指的是在spring的IOC核心容器中出现过的bean对象
        优势：
            在获取bean对象时，注入数据是必须的操作，否则无法成功创建对象
        劣势：
            改了bean对象的实例化方式，如果用不到这些数据，也必须提供
    -->
    <bean id="accountService04" class="com.wj04.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="test"></constructor-arg>
        <constructor-arg name="age" value="12"></constructor-arg>
        <!--<constructor-arg name="birthday" value="1970-05-14"></constructor-arg>-->  <!--是不能这样转日期的-->
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>
    <!--配置一个日期对象-->
    <bean id="now" class="java.util.Date" />

    <!--
        set方法注入                       常用
            标签：property
                属性：
                    name：用于指定注入时所调用的set方法的名称
                    value：
                    ref：
         优势：
            创建对象时没哟明确的限制，可以直接使用默认构造函数
         劣势：
            如果某个成员必须有值，则获取对象必须调用set方法
    -->
    <bean id="accountService04-1" class="com.wj04.service.impl.AccountServiceImpl">
        <property name="name" value="test2" />
        <property name="age" value="12" />
        <property name="birthday" ref="now" />
    </bean>
    <!--
        复杂类型（集合类型）注入
        用于给List集合注入的标签，array，list,set
        用于给Map集合注入的标签，entry，props
    -->

    <bean id="accountService04-2" class="com.wj04.service.impl.AccountServiceImpl">
        <property name="myStr">
            <array>
                <value>aa</value>
                <value>bb</value>
                <value>cc</value>
            </array>
        </property>
        <property name="myList">
            <list>
                <value>aa</value>
                <value>bb</value>
                <value>cc</value>
            </list>
        </property>
        <property name="mySet">
            <set>
                <value>aa</value>
                <value>bb</value>
                <value>cc</value>
            </set>
        </property>
        <property name="myMap">
            <map>
                <entry key="key1" value="value1" />
                <entry key="key2">
                    <value>value2</value>
                </entry>
            </map>
        </property>
        <property name="myProps">
            <props>
                <prop key="key1">value1</prop>
                <prop key="key2">value2</prop>
            </props>
        </property>
    </bean>

    <!--基于注解的IOC开发-->
    <!--告知spring在创建容器时要扫描的包，配置所需要的标签不是在beans的约束中，而是一个名称为context
    名称空间和约束中-->
    <context:component-scan base-package="com.wj05" />
    <bean id="accountDao5-2" class="com.wj05.dao.impl.AccountDaoImpl" />

    <!--基于xml的IOC案例-->
    <bean id="accountService06" class="com.wj06.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao06" />
    </bean>
    <bean id="accountDao06" class="com.wj06.dao.impl.AccountDaoImpl">
        <!--注入QueryRunner-->
        <property name="runner" ref="queryRunner" />
    </bean>
    <bean id="queryRunner" class="org.apache.commons.dbutils.QueryRunner" scope="prototype">
        <constructor-arg name="ds" ref="dataSource" />
    </bean>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver" />
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3307/my" />
        <property name="user" value="root" />
        <property name="password" value="root" />
    </bean>
    <!--案例改造为基于注解的-->
    <context:component-scan base-package="com.wj07" />
    <bean id="queryRunner07" class="org.apache.commons.dbutils.QueryRunner" scope="prototype">
        <constructor-arg name="ds" ref="dataSource" />
    </bean>

    <!--使用事务，不再直接从连接池中获取连接-->
    <bean id="queryRunner09" class="org.apache.commons.dbutils.QueryRunner" scope="prototype">
    </bean>
    <!--配置ConnectionUtils-->
    <bean id="connectionUtils" class="com.wj09.utils.ConnectionUtils">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <bean id="accountDao09" class="com.wj09.dao.impl.AccountDaoImpl">
        <property name="connectionUtils" ref="connectionUtils"/>
        <property name="runner09" ref="queryRunner09" />
    </bean>
    <bean id="accountService09" class="com.wj09.service.impl.AccountServiceImpl">
        <property name="accountDao09" ref="accountDao09" />
        <property name="txManager" ref="txManager" />
    </bean>
    <!--配置事务管理器-->
    <bean id="txManager" class="com.wj09.utils.TransactionManager">
        <property name="connectionUtils" ref="connectionUtils"/>
    </bean>

    <!--9.2.使用动态代理的方式来实现整个事务的控制-->
    <bean id="accountService09-2" class="com.wj09.service.impl.AccountService2Impl" >
           <property name="accountDao09" ref="accountDao09" />
    </bean>
    <bean id="beanFactory" class="com.wj09.factory.BeanFactory">
        <property name="accountService" ref="accountService09-2" />
        <property name="txManager" ref="txManager" />
    </bean>
    <!--配置代理的service对象-->
    <bean id="proxyAccountService09-2" factory-bean="beanFactory" factory-method="getAccountService"></bean>

    <!--10.基于Spring的XML的AOP实现-->
    <bean id="accountService10" class="com.wj10.service.impl.AccountServiceImpl"></bean>
    <!--spring基于XML的AOP配置步骤
        1.把通知Bean也交给Spring管理
        2.使用aop:config标签表明AOP的配置
        3.使用aop:aspect标签配置切面
            属性：
                id:是给切面提供一个唯一标识
                ref属性：是指定通知类Bean的id
        4.在aop:aspect标签内部使用对应标签来配置通知的类型
            现在示例是让printLog方法在切入点方法执行之前执行，所以是前置通知
            aop:before
                method属性：用于指定Logger类中的哪个方法是前置的通知
                pointcut属性：用于指定切入点表达式，改表达式的含义是对业务层哪些方法增强


           切入点表达式写法：
            关键字：execution(表达式)
                表达式：
                    访问修饰符 返回值 包名.包名.包名...类名.方法名(参数列表)
            标准的表达式写法：
                public void com.wj10.service.impl.AccountServiceImpl.saveAccount()
                访问修饰符可以省略不写
                    void com.wj10.service.impl.AccountServiceImpl.saveAccount()
                返回值可以使用通配符，任意返回值
                    * com.wj10.service.impl.AccountServiceImpl.saveAccount()
                包名可以使用通配符，表示任意包，但是有几级包，就需要写几个*
                    * *.*.*.*.AccountServiceImpl.saveAccount()
                包名可以使用..表示当前包及其子包
                    * *..AccountServiceImpl.saveAccount()
                类名和方法名都可以使用*通配符
                    * *..*.*()
                参数列表：
                    可以直接写数据类型：
                        基本类型直接写名称  int
                        引用类型写包名.类名的形式  java.lang.String
                     类型可以使用通配符表示任意类型
                     可以使用..表示有无参数均可，有参数可以是任意类型
                     * *..*.*(..)
                全通配写法：
                    * *..*.(..)
                实际开发中通常写法：
                    * com.wj10.service.impl.*.*(..)
    -->
    <bean id="logger" class="com.wj10.utils.Logger"></bean>
    <aop:config>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知的类型，并且建立通知方法和切入点方法的关联-->
<!--            <aop:before method="printLog" pointcut="execution(* com.wj10.service.impl.*.*(..))"></aop:before>-->
            <!--切入点方法正常执行之后执行-->
<!--            <aop:after-returning method="after" pointcut="execution(* com.wj10.service.impl.*.*(..))"></aop:after-returning>-->
            <!--切入点方法执行异常之后执行-->
<!--            <aop:after-throwing method="throwing" pointcut="execution(* com.wj10.service.impl.*.*(..))"></aop:after-throwing>-->
            <!--无论切入点方法是否正常执行，都会最后被执行-->
<!--            <aop:after method="fina"  pointcut="execution(* com.wj10.service.impl.*.*(..))"></aop:after>-->
            
            <!--配置环绕通知-->
            <aop:around method="around" pointcut="execution(* com.wj10.service.impl.*.*(..))"></aop:around>
        </aop:aspect>
    </aop:config>

    <!--11.基于注解的AOP实现-->
    <context:component-scan base-package="com.wj11" />
    <!--配置spring开启注解AOP的支持-->
    <aop:aspectj-autoproxy />   <!--此处可以使用EnableAspectJAutoProxy注解替代-->
</beans>